Installation of module required to OCR Run Ones,not requried every time
!apt-get install tesseract-ocr
!apt-get install libtesseract-dev
!pip install pytesseract
#Import the required libraries for read the data from image 
import pytesseract       #It use for extract text from the uploaded images.
from PIL import Image
from IPython.display import display
import re   #Regular expressions (regex) are used for pattern matching and text manipulation.
import requests   #Requests library in Python is used for making HTTP requests.
def ocr_image(image_path):   #create function to recognize the text from images
    extracted_text = pytesseract.image_to_string(Image.open(image_path))
    return extracted_text
Step-2.Text Preprocessing:
def preprocess_text(text):
    text = re.sub(' +', ' ', text)    # Remove extra spaces
    text = re.sub(r'([^\s\w]|_)+-', '', text)    # Normalize punctuation
    text = text.replace('\n', ' ')     # Handle line breaks
    return text                                 
Step-3.Spell and Grammar Checking:
def correct_text(text):
    language_tool_url = "https://api.languagetool.org/v2/check"
    payload = {
        "text": text,
        "language": "en",  # Language code for Indian English
    }
    
    try:
        response = requests.post(language_tool_url, data=payload)
        response.raise_for_status()  # Raise an error for unsuccessful responses
        results = response.json().get("matches", [])
​
        corrected_text = text
        for match in results:
            if match.get("replacements"):
                correction = match["replacements"][0]["value"]
                start_pos = match["offset"]
                end_pos = start_pos + match["length"]
                corrected_text = corrected_text[:start_pos] + correction + corrected_text[end_pos:]
​
        return corrected_text
​
    except requests.exceptions.RequestException as e:
        print("Error:", e)
        return None
​
Step-4.Machine Learning for Contextual Correction (It is Optional):
Its is optional but sometime whats happene image contain the word "teh" appears after the word "I" using a regular expression. Then, we replace "teh" with "the" in those instances.

def contextual_correction(text):
    if not isinstance(text, str):  # Check if the input is a string
        print("Error: Input is not a string")
        return None
    
    try:
        corrected_text = text  # Example rule-based correction logic
        matches = re.finditer(r'\bI\s+teh\b', text)  # Example pattern to find "I teh"
        for match in matches:
            start_index = match.start() + 2  # Start index of the word "teh"
            corrected_text = corrected_text[:start_index] + "the" + corrected_text[start_index+3:]  # Replace "teh" with "the"
        
        return corrected_text
    
    except Exception as e:
        print("Error:", e)
        return None
Step -5.Integration and Testing:
def print_image(image_path):
    try:
        # Open the image file
        img = Image.open(image_path)
        
        # Display the image in the notebook
        display(img)
    except Exception as e:
        print("An error occurred:", e)
​
# Example usage: its show the actual image which is used for testing.
image_path = r"C:\Users\vinay\OneDrive\Desktop\Test Image.jpg" # Update this with the actual path to your image
print_image(image_path)

image_path = r"C:\Users\vinay\OneDrive\Desktop\Test Image.jpg" # Update this with the actual path to your image
text_from_image = ocr_image(image_path)
preprocessed_text = preprocess_text(text_from_image)
corrected_text = correct_text(preprocessed_text)
final_text = contextual_correction(corrected_text)
print(final_text)
